name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Lint with ruff
        run: |
          ruff check src/
      
      - name: Type check with mypy
        run: |
          mypy src/cnf --ignore-missing-imports
        continue-on-error: true
      
      - name: Run tests
        run: |
          pytest tests/ -v
        continue-on-error: true
      
      - name: Check CLI loads
        run: |
          cnf version
  
  build-package:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build
      
      - name: Build package
        run: |
          python -m build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
  
  validate-configs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate YAML files
        run: |
          python -c "import yaml; [yaml.safe_load(open(f)) for f in ['configs/inventory.yaml', 'configs/providers.yaml', 'configs/oci_endpoints.yaml', 'configs/testplan.sample.yaml']]"
      
      - name: Validate JSON files
        run: |
          python -c "import json; json.load(open('configs/registry.json'))"
